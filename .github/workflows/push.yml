# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: "registry.digitalocean.com/test-testing"
  IMAGE_NAME: "api"
  CONTAINER_APP_NAME: "api-container"
  CONTAINER_MONGODB_NAME: "mongodb-container"
  NETWORK_MONGODB_APP: "mongodb-app-network"


jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: go.mod
    
      - name: Unit tests
        run: go test --short ./...

      - name: Integration tests
        run: make test.integration

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build docker image  
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .          
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with: 
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_APP_NAME,CONTAINER_MONGODB_NAME,NETWORK_MONGODB_APP
          script: |
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} $(echo $REGISTRY)

            docker network rm  $(echo $NETWORK_MONGODB_APP)
            docker network create  $(echo $NETWORK_MONGODB_APP)
            
            docker stop $(echo $CONTAINER_APP_NAME)
            docker rm $(echo $CONTAINER_APP_NAME)

            docker stop $(echo $CONTAINER_MONGODB_NAME)
            docker rm $(echo $CONTAINER_MONGODB_NAME)

            docker run  -d  -p 27017:27017 --net $(echo $NETWORK_MONGODB_APP) --name $(echo $CONTAINER_MONGODB_NAME) -e MONGO_INITDB_ROOT_USERNAME=Knyazrek2 -e MONGO_INITDB_ROOT_PASSWORD=zivivu08 -e MONGODB_DATABASE=test mongo
            docker run  -d  -p 4000:4000 --net $(echo $NETWORK_MONGODB_APP)  --name $(echo $CONTAINER_APP_NAME)  $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
           

          
       
       
            
          
    