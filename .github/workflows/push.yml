# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: "registry.digitalocean.com/test-testing"
  IMAGE_NAME: "test-api"
  CONTAINER_NAME: "test-api-container"


jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Unit tests
        run: go test --short ./...

      - name: Integration tests
        run: make test.integration

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Build docker image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME
          script: |
            
            docker login -u ${{ secrets.DIGITAL_OCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITAL_OCEAN_ACCESS_TOKEN }} $(echo $REGISTRY)
            
            docker stop $(echo $CONTAINER_NAME)
            
            docker rm $(echo $CONTAINER_NAME)
          
            export TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            export CONSUMER_KEY=${{ secrets.POCKET_CONSUMER_KEY }}
            export AUTH_SERVER_URL=${{ secrets.AUTH_SERVER_URL }}
           
            docker run -e TOKEN -e CONSUMER_KEY -e AUTH_SERVER_URL -d \
            --restart always \
            --publish 80:80 \
            --name $(echo $CONTAINER_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  
    
 